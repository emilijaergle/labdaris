<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements template_preprocess_page().
 */
function labdaris_preprocess_page(array &$variables) {

  // Provide language specific front page link.
  $variables['front_path'] = Url::fromRoute('<front>')->toString();
}

/**
 * Implements template_preprocess_node().
 */
function labdaris_preprocess_node(array &$variables) {
  $node = $variables['node'];
  $bundle = $node->bundle();
}

/**
 * Implements template_preprocess_paragraph().
 */
function labdaris_preprocess_paragraph(array &$variables) {
  $paragraph = $variables['paragraph'];
  $parent = $paragraph->getParentEntity();
}

/**
 * Implements hook_preprocess_media().
 */
function labdaris_preprocess_media(&$variables) {
  $media = $variables['media'];

  if ($media->get('field_media_document')) {
    $file = $media->get('field_media_document')->entity;

    // Getting all file entity details.
    $url = $file->createFileUrl(FALSE);
    $link_text = $media->getName();
    $options = [];
    $mime_type = $file->getMimeType();
    $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();
    $options['attributes']['title'] = $file->getFilename();

    $variables['file_url'] = $url;
    $variables['file_size'] = format_size($file->getSize());
    $variables['link'] = Link::fromTextAndUrl($link_text, Url::fromUri($url, $options))->toRenderable();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function labdaris_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $element = $variables['elements'];

  if (isset($element['content']['#block_content'])) {
    $bundle = $element['content']['#block_content']->bundle();
    // Add suggestion before block ID and machine name.
    array_splice($suggestions, -2, 0, ['block__block_content__' . $bundle]);

    if (isset($element['#configuration']['view_mode'])) {
      $view_mode = $element['#configuration']['view_mode'];
      // Add suggestion before block ID and machine name.
      array_splice($suggestions, -2, 0, ['block__block_content__' . $bundle . '__' . $view_mode]);
    }
  }
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function labdaris_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $element = $variables['elements'];
  $view_mode = $element['#view_mode'];

  $suggestions[] = 'taxonomy_term__' . $view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function labdaris_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $suggestions = [];
  $element = $variables['element'];

  // $entity_type = $element['#entity_type'];
  $field_type = $element['#field_type'];
  $field_name = $element['#field_name'];
  $view_mode = $element['#view_mode'];
  $bundle = $element['#bundle'];

  $suggestions[] = 'field__' . $field_type;
  $suggestions[] = 'field__' . $field_name;
  $suggestions[] = 'field__' . $field_name . '__' . $bundle;
  $suggestions[] = 'field__' . $field_name . '__' . $bundle . '__' . $view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function labdaris_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view_unformatted__' . $variables['view']->id();
}
